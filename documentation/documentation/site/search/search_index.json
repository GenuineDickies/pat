{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Patone Documentation Welcome to the Patone documentation portal. This documentation contains developer, administrator, and end-user-facing guides for the Patone Roadside Assistance platform. Use the navigation on the left to find setup guides, API reference, deployment instructions, and troubleshooting. Quick links API Reference \u2014 see API Reference for the OpenAPI spec and examples. Developer Setup \u2014 how to get the code running locally. Database Schema \u2014 overview of the database tables and relationships. If you need a PDF or hosted site, follow the instructions in technical-tasks.md to build and publish via MkDocs.","title":"Home"},{"location":"#patone-documentation","text":"Welcome to the Patone documentation portal. This documentation contains developer, administrator, and end-user-facing guides for the Patone Roadside Assistance platform. Use the navigation on the left to find setup guides, API reference, deployment instructions, and troubleshooting. Quick links API Reference \u2014 see API Reference for the OpenAPI spec and examples. Developer Setup \u2014 how to get the code running locally. Database Schema \u2014 overview of the database tables and relationships. If you need a PDF or hosted site, follow the instructions in technical-tasks.md to build and publish via MkDocs.","title":"Patone Documentation"},{"location":"admin-manual/","text":"Administrator Manual This manual is for administrators of the Patone platform. Access & roles Admins can manage customers, drivers, service requests, and reports. Use the admin dashboard (verify URL in index.php or DASHBOARD_QUICK_START.md ). Common tasks Managing customers: create, edit, deactivate Managing drivers: onboarding, suspend, change availability Viewing service requests: filter by status, priority, or date Generating reports: daily and monthly reports available under Reports Monitoring & logs Application logs: logs/ folder local; configure centralized logging for production PHP error logs: check PHP-FPM and webserver logs Audit logs: if present, review user action trails for security events Settings System configuration is in config.php (do not store secrets in repo) Update manifest.json for app metadata and service worker ( service-worker.js ) Emergency procedures If service is down: escalate to on-call operator, check DB connectivity, check webserver and PHP-FPM status, review recent deploys Data restoration: follow DB backup restore steps (noted in org-runbook) Backups Regular DB backups and filesystem backups for uploads and critical configs Notes For specific UI walkthroughs, add screen-capture videos or reference DASHBOARD_VISUAL_OVERVIEW.md in the repo.","title":"Admin Manual"},{"location":"admin-manual/#administrator-manual","text":"This manual is for administrators of the Patone platform. Access & roles Admins can manage customers, drivers, service requests, and reports. Use the admin dashboard (verify URL in index.php or DASHBOARD_QUICK_START.md ). Common tasks Managing customers: create, edit, deactivate Managing drivers: onboarding, suspend, change availability Viewing service requests: filter by status, priority, or date Generating reports: daily and monthly reports available under Reports Monitoring & logs Application logs: logs/ folder local; configure centralized logging for production PHP error logs: check PHP-FPM and webserver logs Audit logs: if present, review user action trails for security events Settings System configuration is in config.php (do not store secrets in repo) Update manifest.json for app metadata and service worker ( service-worker.js ) Emergency procedures If service is down: escalate to on-call operator, check DB connectivity, check webserver and PHP-FPM status, review recent deploys Data restoration: follow DB backup restore steps (noted in org-runbook) Backups Regular DB backups and filesystem backups for uploads and critical configs Notes For specific UI walkthroughs, add screen-capture videos or reference DASHBOARD_VISUAL_OVERVIEW.md in the repo.","title":"Administrator Manual"},{"location":"api/","text":"API Reference The project includes an OpenAPI (Swagger) specification describing the REST endpoints used by the platform. Files openapi.yaml \u2014 the canonical OpenAPI 3.0 spec for the API (included in this docs bundle). How to view the API locally Install Redoc or use Swagger UI. For a quick local view with Redoc: Install redoc-cli ( npm install -g redoc-cli ) and run: redoc-cli serve openapi.yaml Or use the online Swagger Editor: https://editor.swagger.io and paste the contents of openapi.yaml . Authentication All protected endpoints require a JWT in the Authorization header: Bearer <token> . The /login endpoint returns a token on successful authentication. Examples List customers: GET /api/customers Create service request: POST /api/requests Error responses follow the Error object defined in the spec. Notes for integrators Update the server URL in openapi.yaml before using in production. Rate limits and webhook details are described in the Integration Guide.","title":"API Reference"},{"location":"api/#api-reference","text":"The project includes an OpenAPI (Swagger) specification describing the REST endpoints used by the platform. Files openapi.yaml \u2014 the canonical OpenAPI 3.0 spec for the API (included in this docs bundle). How to view the API locally Install Redoc or use Swagger UI. For a quick local view with Redoc: Install redoc-cli ( npm install -g redoc-cli ) and run: redoc-cli serve openapi.yaml Or use the online Swagger Editor: https://editor.swagger.io and paste the contents of openapi.yaml . Authentication All protected endpoints require a JWT in the Authorization header: Bearer <token> . The /login endpoint returns a token on successful authentication. Examples List customers: GET /api/customers Create service request: POST /api/requests Error responses follow the Error object defined in the spec. Notes for integrators Update the server URL in openapi.yaml before using in production. Rate limits and webhook details are described in the Integration Guide.","title":"API Reference"},{"location":"code-architecture/","text":"Code Architecture This section provides a high-level overview of the application's architecture. Project layout (high-level) backend/ \u2014 PHP controllers, models, and routing controllers/ \u2014 controller classes (ApiController, AuthController, etc.) models/ \u2014 domain models and DB access config/ \u2014 database and environment configuration frontend/ \u2014 UI pages and JS assets/ \u2014 compiled JS/CSS/images database/ \u2014 schema and migrations tests/ \u2014 PHPUnit tests and test fixtures Controller flow Router.php dispatches requests to controller actions. Controllers invoke models for DB access and return JSON responses for API routes. Key design notes Authentication is JWT-based. Keep business logic in models/services instead of controllers to enable unit testing. Use dependency injection where possible for easier mocking in tests. Suggested next steps (small improvements) Add typed DTOs for request/response payloads Introduce a service layer and move complex logic out of controllers Add unit tests for services and integration tests for controller endpoints References See backend/controllers/ for examples of controllers and current PHPDoc coverage.","title":"Code Architecture"},{"location":"code-architecture/#code-architecture","text":"This section provides a high-level overview of the application's architecture. Project layout (high-level) backend/ \u2014 PHP controllers, models, and routing controllers/ \u2014 controller classes (ApiController, AuthController, etc.) models/ \u2014 domain models and DB access config/ \u2014 database and environment configuration frontend/ \u2014 UI pages and JS assets/ \u2014 compiled JS/CSS/images database/ \u2014 schema and migrations tests/ \u2014 PHPUnit tests and test fixtures Controller flow Router.php dispatches requests to controller actions. Controllers invoke models for DB access and return JSON responses for API routes. Key design notes Authentication is JWT-based. Keep business logic in models/services instead of controllers to enable unit testing. Use dependency injection where possible for easier mocking in tests. Suggested next steps (small improvements) Add typed DTOs for request/response payloads Introduce a service layer and move complex logic out of controllers Add unit tests for services and integration tests for controller endpoints References See backend/controllers/ for examples of controllers and current PHPDoc coverage.","title":"Code Architecture"},{"location":"database-schema/","text":"Database Schema This document provides a comprehensive overview of the Patone Roadside Assistance platform database schema. Overview Database Name : roadside_assistance (production), roadside_assistance_test (testing) Character Set : UTF8MB4 with utf8mb4_unicode_ci collation Engine : InnoDB (supports transactions and foreign keys) Source Files database/schema.sql \u2014 Complete schema with sample data database/migrations/ \u2014 Future migrations (if implemented) database/sample_customers_import.csv \u2014 Sample customer import data Core Tables Users ( users ) Purpose : System users (admin, managers, dispatchers, drivers) Column Type Notes id INT UNSIGNED AUTO_INCREMENT Primary key username VARCHAR(50) UNIQUE Login username email VARCHAR(100) UNIQUE Email address password VARCHAR(255) Hashed password first_name VARCHAR(50) User's first name last_name VARCHAR(50) User's last name role ENUM 'admin', 'manager', 'dispatcher', 'driver' status ENUM 'active', 'inactive', 'suspended' last_login DATETIME Last login timestamp Indexes : username, email, status Customers ( customers ) Purpose : Customer profiles and contact information Column Type Notes id INT UNSIGNED AUTO_INCREMENT Primary key first_name VARCHAR(50) Customer's first name last_name VARCHAR(50) Customer's last name email VARCHAR(100) Email address phone VARCHAR(20) Primary phone number emergency_contact VARCHAR(20) Emergency contact number address VARCHAR(255) Street address city VARCHAR(100) City state VARCHAR(50) State/province zip VARCHAR(20) Postal code is_vip BOOLEAN VIP customer status status ENUM 'active', 'inactive', 'suspended' Indexes : name (last_name, first_name), email, phone, status, is_vip Customer Vehicles ( customer_vehicles ) Purpose : Vehicle information for each customer Column Type Notes id INT UNSIGNED AUTO_INCREMENT Primary key customer_id INT UNSIGNED FK to customers.id make VARCHAR(50) Vehicle make model VARCHAR(50) Vehicle model year INT Model year license_plate VARCHAR(20) License plate number vin VARCHAR(17) Vehicle identification number is_primary BOOLEAN Primary vehicle for customer Foreign Keys : customer_id \u2192 customers(id) ON DELETE CASCADE Drivers ( drivers ) Purpose : Driver profiles, status, and location Column Type Notes id INT UNSIGNED AUTO_INCREMENT Primary key user_id INT UNSIGNED FK to users.id (optional) license_number VARCHAR(50) Driver's license number license_state VARCHAR(50) Issuing state license_expiry DATE License expiration status ENUM 'available', 'busy', 'offline', 'on_break' current_latitude DECIMAL(10, 8) GPS latitude current_longitude DECIMAL(11, 8) GPS longitude last_location_update DATETIME Last GPS update rating DECIMAL(3, 2) Driver rating (0.00-5.00) total_jobs INT Total jobs assigned completed_jobs INT Successfully completed jobs Foreign Keys : user_id \u2192 users(id) ON DELETE SET NULL Indexes : name, status, location (lat/lng) Service Types ( service_types ) Purpose : Catalog of available services Column Type Notes id INT UNSIGNED AUTO_INCREMENT Primary key name VARCHAR(100) Service name description TEXT Service description base_price DECIMAL(10, 2) Base price estimated_duration INT Duration in minutes is_active BOOLEAN Active/inactive status priority INT Service priority level Default Services : Flat Tire Change, Jump Start, Fuel Delivery, Lockout Service, Towing, Winch Out, Battery Replacement, Minor Repair Service Requests ( service_requests ) Purpose : Core table for service requests/jobs Column Type Notes id INT UNSIGNED AUTO_INCREMENT Primary key customer_id INT UNSIGNED FK to customers.id driver_id INT UNSIGNED FK to drivers.id (nullable) service_type_id INT UNSIGNED FK to service_types.id vehicle_id INT UNSIGNED FK to customer_vehicles.id status ENUM 'pending', 'assigned', 'in_progress', 'completed', 'cancelled' priority ENUM 'low', 'normal', 'high', 'emergency' location_address VARCHAR(255) Service location address location_latitude DECIMAL(10, 8) GPS coordinates location_longitude DECIMAL(11, 8) GPS coordinates estimated_cost DECIMAL(10, 2) Estimated cost final_cost DECIMAL(10, 2) Actual final cost assigned_at DATETIME When assigned to driver started_at DATETIME When service started completed_at DATETIME When service completed rating INT Customer rating (1-5) Foreign Keys : - customer_id \u2192 customers(id) ON DELETE CASCADE - driver_id \u2192 drivers(id) ON DELETE SET NULL - service_type_id \u2192 service_types(id) ON DELETE RESTRICT - vehicle_id \u2192 customer_vehicles(id) ON DELETE SET NULL Security & Audit Tables Activity Logs ( activity_logs ) Purpose : Audit trail for user actions Column Type Notes user_id INT UNSIGNED FK to users.id action VARCHAR(100) Action performed entity_type VARCHAR(50) Type of entity modified entity_id INT UNSIGNED ID of entity modified ip_address VARCHAR(45) User's IP address Login Attempts ( login_attempts ) Purpose : Security monitoring for login attempts Column Type Notes username VARCHAR(100) Attempted username ip_address VARCHAR(45) Source IP success BOOLEAN Login success/failure User Sessions ( user_sessions ) Purpose : Active user session management Column Type Notes user_id INT UNSIGNED FK to users.id session_token VARCHAR(255) UNIQUE Session token expires_at DATETIME Session expiration Configuration Tables Settings ( settings ) Purpose : System configuration key-value pairs Column Type Notes setting_key VARCHAR(100) UNIQUE Configuration key setting_value TEXT Configuration value setting_type ENUM 'string', 'integer', 'boolean', 'json' is_public BOOLEAN Public/private setting Default Settings : site_name, max_dispatch_distance, business_hours, GPS tracking, notifications Reports ( reports ) Purpose : Generated report metadata and file tracking Column Type Notes report_type VARCHAR(50) Type of report generated_by INT UNSIGNED FK to users.id parameters TEXT JSON encoded parameters file_path VARCHAR(255) Path to generated file status ENUM 'pending', 'processing', 'completed', 'failed' Database Operations Initial Setup -- Create databases CREATE DATABASE roadside_assistance CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; CREATE DATABASE roadside_assistance_test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; -- Import schema mysql -u root -p roadside_assistance < database/schema.sql mysql -u root -p roadside_assistance_test < database/schema.sql Common Queries Get active service requests : SELECT sr.id, c.first_name, c.last_name, st.name as service_type, sr.status, sr.created_at FROM service_requests sr JOIN customers c ON sr.customer_id = c.id JOIN service_types st ON sr.service_type_id = st.id WHERE sr.status IN ('pending', 'assigned', 'in_progress') ORDER BY sr.created_at DESC; Driver performance : SELECT d.first_name, d.last_name, d.rating, d.total_jobs, d.completed_jobs, (d.completed_jobs / NULLIF(d.total_jobs, 0) * 100) as completion_rate FROM drivers d WHERE d.status = 'available' ORDER BY d.rating DESC; Customer service history : SELECT sr.id, st.name, sr.status, sr.created_at, sr.final_cost, sr.rating FROM service_requests sr JOIN service_types st ON sr.service_type_id = st.id WHERE sr.customer_id = ? ORDER BY sr.created_at DESC; Schema Maintenance Backup # Full backup with data mysqldump -u root -p roadside_assistance > backup_$(date +%Y%m%d).sql # Schema only mysqldump --no-data -u root -p roadside_assistance > schema_backup.sql Migrations Keep database/schema.sql as the canonical source For production updates, create migration scripts in database/migrations/ Test all schema changes against roadside_assistance_test first Performance Monitoring Monitor slow query log for optimization opportunities Key indexes are already in place for common queries Consider partitioning activity_logs and login_attempts by date for large datasets Data Import/Export Sample Data Import # Import sample customers (if CSV import script exists) mysql -u root -p roadside_assistance -e \" LOAD DATA LOCAL INFILE 'database/sample_customers_import.csv' INTO TABLE customers FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n' IGNORE 1 ROWS;\" Regular Maintenance Archive old activity logs (older than 1 year) Clean up expired user sessions Monitor and optimize table sizes and indexes","title":"Database"},{"location":"database-schema/#database-schema","text":"This document provides a comprehensive overview of the Patone Roadside Assistance platform database schema.","title":"Database Schema"},{"location":"database-schema/#overview","text":"Database Name : roadside_assistance (production), roadside_assistance_test (testing) Character Set : UTF8MB4 with utf8mb4_unicode_ci collation Engine : InnoDB (supports transactions and foreign keys)","title":"Overview"},{"location":"database-schema/#source-files","text":"database/schema.sql \u2014 Complete schema with sample data database/migrations/ \u2014 Future migrations (if implemented) database/sample_customers_import.csv \u2014 Sample customer import data","title":"Source Files"},{"location":"database-schema/#core-tables","text":"","title":"Core Tables"},{"location":"database-schema/#users-users","text":"Purpose : System users (admin, managers, dispatchers, drivers) Column Type Notes id INT UNSIGNED AUTO_INCREMENT Primary key username VARCHAR(50) UNIQUE Login username email VARCHAR(100) UNIQUE Email address password VARCHAR(255) Hashed password first_name VARCHAR(50) User's first name last_name VARCHAR(50) User's last name role ENUM 'admin', 'manager', 'dispatcher', 'driver' status ENUM 'active', 'inactive', 'suspended' last_login DATETIME Last login timestamp Indexes : username, email, status","title":"Users (users)"},{"location":"database-schema/#customers-customers","text":"Purpose : Customer profiles and contact information Column Type Notes id INT UNSIGNED AUTO_INCREMENT Primary key first_name VARCHAR(50) Customer's first name last_name VARCHAR(50) Customer's last name email VARCHAR(100) Email address phone VARCHAR(20) Primary phone number emergency_contact VARCHAR(20) Emergency contact number address VARCHAR(255) Street address city VARCHAR(100) City state VARCHAR(50) State/province zip VARCHAR(20) Postal code is_vip BOOLEAN VIP customer status status ENUM 'active', 'inactive', 'suspended' Indexes : name (last_name, first_name), email, phone, status, is_vip","title":"Customers (customers)"},{"location":"database-schema/#customer-vehicles-customer_vehicles","text":"Purpose : Vehicle information for each customer Column Type Notes id INT UNSIGNED AUTO_INCREMENT Primary key customer_id INT UNSIGNED FK to customers.id make VARCHAR(50) Vehicle make model VARCHAR(50) Vehicle model year INT Model year license_plate VARCHAR(20) License plate number vin VARCHAR(17) Vehicle identification number is_primary BOOLEAN Primary vehicle for customer Foreign Keys : customer_id \u2192 customers(id) ON DELETE CASCADE","title":"Customer Vehicles (customer_vehicles)"},{"location":"database-schema/#drivers-drivers","text":"Purpose : Driver profiles, status, and location Column Type Notes id INT UNSIGNED AUTO_INCREMENT Primary key user_id INT UNSIGNED FK to users.id (optional) license_number VARCHAR(50) Driver's license number license_state VARCHAR(50) Issuing state license_expiry DATE License expiration status ENUM 'available', 'busy', 'offline', 'on_break' current_latitude DECIMAL(10, 8) GPS latitude current_longitude DECIMAL(11, 8) GPS longitude last_location_update DATETIME Last GPS update rating DECIMAL(3, 2) Driver rating (0.00-5.00) total_jobs INT Total jobs assigned completed_jobs INT Successfully completed jobs Foreign Keys : user_id \u2192 users(id) ON DELETE SET NULL Indexes : name, status, location (lat/lng)","title":"Drivers (drivers)"},{"location":"database-schema/#service-types-service_types","text":"Purpose : Catalog of available services Column Type Notes id INT UNSIGNED AUTO_INCREMENT Primary key name VARCHAR(100) Service name description TEXT Service description base_price DECIMAL(10, 2) Base price estimated_duration INT Duration in minutes is_active BOOLEAN Active/inactive status priority INT Service priority level Default Services : Flat Tire Change, Jump Start, Fuel Delivery, Lockout Service, Towing, Winch Out, Battery Replacement, Minor Repair","title":"Service Types (service_types)"},{"location":"database-schema/#service-requests-service_requests","text":"Purpose : Core table for service requests/jobs Column Type Notes id INT UNSIGNED AUTO_INCREMENT Primary key customer_id INT UNSIGNED FK to customers.id driver_id INT UNSIGNED FK to drivers.id (nullable) service_type_id INT UNSIGNED FK to service_types.id vehicle_id INT UNSIGNED FK to customer_vehicles.id status ENUM 'pending', 'assigned', 'in_progress', 'completed', 'cancelled' priority ENUM 'low', 'normal', 'high', 'emergency' location_address VARCHAR(255) Service location address location_latitude DECIMAL(10, 8) GPS coordinates location_longitude DECIMAL(11, 8) GPS coordinates estimated_cost DECIMAL(10, 2) Estimated cost final_cost DECIMAL(10, 2) Actual final cost assigned_at DATETIME When assigned to driver started_at DATETIME When service started completed_at DATETIME When service completed rating INT Customer rating (1-5) Foreign Keys : - customer_id \u2192 customers(id) ON DELETE CASCADE - driver_id \u2192 drivers(id) ON DELETE SET NULL - service_type_id \u2192 service_types(id) ON DELETE RESTRICT - vehicle_id \u2192 customer_vehicles(id) ON DELETE SET NULL","title":"Service Requests (service_requests)"},{"location":"database-schema/#security-audit-tables","text":"","title":"Security &amp; Audit Tables"},{"location":"database-schema/#activity-logs-activity_logs","text":"Purpose : Audit trail for user actions Column Type Notes user_id INT UNSIGNED FK to users.id action VARCHAR(100) Action performed entity_type VARCHAR(50) Type of entity modified entity_id INT UNSIGNED ID of entity modified ip_address VARCHAR(45) User's IP address","title":"Activity Logs (activity_logs)"},{"location":"database-schema/#login-attempts-login_attempts","text":"Purpose : Security monitoring for login attempts Column Type Notes username VARCHAR(100) Attempted username ip_address VARCHAR(45) Source IP success BOOLEAN Login success/failure","title":"Login Attempts (login_attempts)"},{"location":"database-schema/#user-sessions-user_sessions","text":"Purpose : Active user session management Column Type Notes user_id INT UNSIGNED FK to users.id session_token VARCHAR(255) UNIQUE Session token expires_at DATETIME Session expiration","title":"User Sessions (user_sessions)"},{"location":"database-schema/#configuration-tables","text":"","title":"Configuration Tables"},{"location":"database-schema/#settings-settings","text":"Purpose : System configuration key-value pairs Column Type Notes setting_key VARCHAR(100) UNIQUE Configuration key setting_value TEXT Configuration value setting_type ENUM 'string', 'integer', 'boolean', 'json' is_public BOOLEAN Public/private setting Default Settings : site_name, max_dispatch_distance, business_hours, GPS tracking, notifications","title":"Settings (settings)"},{"location":"database-schema/#reports-reports","text":"Purpose : Generated report metadata and file tracking Column Type Notes report_type VARCHAR(50) Type of report generated_by INT UNSIGNED FK to users.id parameters TEXT JSON encoded parameters file_path VARCHAR(255) Path to generated file status ENUM 'pending', 'processing', 'completed', 'failed'","title":"Reports (reports)"},{"location":"database-schema/#database-operations","text":"","title":"Database Operations"},{"location":"database-schema/#initial-setup","text":"-- Create databases CREATE DATABASE roadside_assistance CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; CREATE DATABASE roadside_assistance_test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; -- Import schema mysql -u root -p roadside_assistance < database/schema.sql mysql -u root -p roadside_assistance_test < database/schema.sql","title":"Initial Setup"},{"location":"database-schema/#common-queries","text":"Get active service requests : SELECT sr.id, c.first_name, c.last_name, st.name as service_type, sr.status, sr.created_at FROM service_requests sr JOIN customers c ON sr.customer_id = c.id JOIN service_types st ON sr.service_type_id = st.id WHERE sr.status IN ('pending', 'assigned', 'in_progress') ORDER BY sr.created_at DESC; Driver performance : SELECT d.first_name, d.last_name, d.rating, d.total_jobs, d.completed_jobs, (d.completed_jobs / NULLIF(d.total_jobs, 0) * 100) as completion_rate FROM drivers d WHERE d.status = 'available' ORDER BY d.rating DESC; Customer service history : SELECT sr.id, st.name, sr.status, sr.created_at, sr.final_cost, sr.rating FROM service_requests sr JOIN service_types st ON sr.service_type_id = st.id WHERE sr.customer_id = ? ORDER BY sr.created_at DESC;","title":"Common Queries"},{"location":"database-schema/#schema-maintenance","text":"","title":"Schema Maintenance"},{"location":"database-schema/#backup","text":"# Full backup with data mysqldump -u root -p roadside_assistance > backup_$(date +%Y%m%d).sql # Schema only mysqldump --no-data -u root -p roadside_assistance > schema_backup.sql","title":"Backup"},{"location":"database-schema/#migrations","text":"Keep database/schema.sql as the canonical source For production updates, create migration scripts in database/migrations/ Test all schema changes against roadside_assistance_test first","title":"Migrations"},{"location":"database-schema/#performance-monitoring","text":"Monitor slow query log for optimization opportunities Key indexes are already in place for common queries Consider partitioning activity_logs and login_attempts by date for large datasets","title":"Performance Monitoring"},{"location":"database-schema/#data-importexport","text":"","title":"Data Import/Export"},{"location":"database-schema/#sample-data-import","text":"# Import sample customers (if CSV import script exists) mysql -u root -p roadside_assistance -e \" LOAD DATA LOCAL INFILE 'database/sample_customers_import.csv' INTO TABLE customers FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n' IGNORE 1 ROWS;\"","title":"Sample Data Import"},{"location":"database-schema/#regular-maintenance","text":"Archive old activity logs (older than 1 year) Clean up expired user sessions Monitor and optimize table sizes and indexes","title":"Regular Maintenance"},{"location":"deployment-guide/","text":"Deployment Guide This guide covers recommended deployment steps for the Patone platform. Environments Development \u2014 local, quick iteration Staging \u2014 QA and integration testing Production \u2014 public-facing deployment Environment variables & configuration config.php should contain DB connection, JWT secret, and other environment-specific settings. Before deploying, set APP_DEBUG=false and ensure secure JWT secrets. Recommended stack PHP-FPM behind Nginx MySQL or managed RDS Redis for cache/session (optional) A process manager (systemd) for queue workers Simple Docker example (compose) version: '3.8' services: app: image: php:8.1-fpm volumes: - ./:/var/www/html depends_on: - db web: image: nginx:stable ports: - 80:80 volumes: - ./:/var/www/html - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf depends_on: - app db: image: mysql:8 environment: MYSQL_ROOT_PASSWORD: example MYSQL_DATABASE: pat Zero-downtime deploy checklist Run DB migrations in a backwards-compatible way Warm caches and precompile views/assets before switching traffic Test health checks and roll back if necessary Security & best practices Use HTTPS with strong TLS config Rotate JWT and API keys periodically Use least-privilege DB user for app database Configure logging and monitoring (error rates, latency) CI/CD Build and test the app in CI (PHPUnit, PHPStan) Publish docs (MkDocs) to a static site host as part of release artifacts Rollback plan Keep previous build artifacts available Have DB rollback plan (manual or migration-based) \u2014 avoid destructive migrations during peak hours Notes Adjust the example Docker Compose snippet for your environment. Add health checks and appropriate volume/secret handling in production.","title":"Deployment"},{"location":"deployment-guide/#deployment-guide","text":"This guide covers recommended deployment steps for the Patone platform. Environments Development \u2014 local, quick iteration Staging \u2014 QA and integration testing Production \u2014 public-facing deployment Environment variables & configuration config.php should contain DB connection, JWT secret, and other environment-specific settings. Before deploying, set APP_DEBUG=false and ensure secure JWT secrets. Recommended stack PHP-FPM behind Nginx MySQL or managed RDS Redis for cache/session (optional) A process manager (systemd) for queue workers Simple Docker example (compose) version: '3.8' services: app: image: php:8.1-fpm volumes: - ./:/var/www/html depends_on: - db web: image: nginx:stable ports: - 80:80 volumes: - ./:/var/www/html - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf depends_on: - app db: image: mysql:8 environment: MYSQL_ROOT_PASSWORD: example MYSQL_DATABASE: pat Zero-downtime deploy checklist Run DB migrations in a backwards-compatible way Warm caches and precompile views/assets before switching traffic Test health checks and roll back if necessary Security & best practices Use HTTPS with strong TLS config Rotate JWT and API keys periodically Use least-privilege DB user for app database Configure logging and monitoring (error rates, latency) CI/CD Build and test the app in CI (PHPUnit, PHPStan) Publish docs (MkDocs) to a static site host as part of release artifacts Rollback plan Keep previous build artifacts available Have DB rollback plan (manual or migration-based) \u2014 avoid destructive migrations during peak hours Notes Adjust the example Docker Compose snippet for your environment. Add health checks and appropriate volume/secret handling in production.","title":"Deployment Guide"},{"location":"developer-setup/","text":"Developer Setup Guide This guide explains how to set up a local development environment for the Patone Roadside Assistance platform. Prerequisites Required Software PHP 7.4+ (project requirement from composer.json ) Composer for PHP dependency management MySQL 5.7+ or MariaDB 10.3+ for the database Node.js 16+ and npm for JavaScript testing and tools Git for version control Required PHP Extensions Ensure these PHP extensions are installed: php -m | grep -E \"(pdo|pdo_mysql|mysqli|mbstring|openssl|json|curl|zip)\" Step-by-Step Setup 1. Clone the Repository git clone https://github.com/GenuineDickies/pat.git cd pat/Desktop/Code\\ Projects/Patone 2. Install PHP Dependencies composer install 3. Database Setup Create the Database # Connect to MySQL mysql -u root -p # Create the database CREATE DATABASE roadside_assistance CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; CREATE DATABASE roadside_assistance_test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; exit Import the Schema # Import main database schema mysql -u root -p roadside_assistance < database/schema.sql # Import test database schema mysql -u root -p roadside_assistance_test < database/schema.sql 4. Configuration The config.php file contains the main configuration. Key settings to verify: // Database Configuration (lines 23-26 in config.php) define('DB_HOST', 'localhost'); define('DB_USER', 'root'); // Update with your MySQL user define('DB_PASS', ''); // Update with your MySQL password define('DB_NAME', 'roadside_assistance'); Security Note: Change the ENCRYPTION_KEY in config.php before production use. 5. Install Node.js Dependencies (for testing) npm install 6. Verify Setup - Run Tests PHP Tests (PHPUnit) # Run all tests composer test # Or directly with PHPUnit vendor/bin/phpunit # Run specific test suites composer test-unit # Unit tests only composer test-integration # Integration tests only composer test-security # Security tests only JavaScript Tests (Jest) npm test # Run once npm run test:watch # Watch mode npm run test:coverage # With coverage report End-to-End Tests (Playwright) npm run test:e2e # Headless E2E tests npm run test:e2e:ui # Interactive E2E tests Development Workflow Running the Application Locally # Start PHP development server php -S localhost:8000 -t . index.php # Application will be available at http://localhost:8000 File Structure Overview backend/ - PHP controllers, models (PSR-4 autoloaded as Patone\\ namespace) frontend/ - Frontend pages and JavaScript assets/ - Compiled CSS, JS, images database/ - Schema, migrations, sample data tests/ - All test files (Unit, Integration, Security, E2E, JavaScript) logs/ - Application logs uploads/ - File uploads directory Development Tools Code Quality & Documentation # Install PHPStan for static analysis (recommended) composer require --dev phpstan/phpstan # Run static analysis vendor/bin/phpstan analyse backend --level=7 # Install phpDocumentor for API docs composer require --dev phpdocumentor/phpdocumentor # Generate PHP API documentation vendor/bin/phpdoc -d backend -t docs/phpdoc Debugging & Logs Application logs: logs/ directory PHP errors: Check error_log in project root or PHP-FPM logs Debug mode: Already enabled in config.php (set display_errors to 0 for production) Common Issues & Solutions Database Connection Errors # Test MySQL connection mysql -u root -p -e \"SELECT VERSION();\" # Check if database exists mysql -u root -p -e \"SHOW DATABASES;\" | grep roadside Permission Issues # Ensure proper permissions for logs and uploads chmod 755 logs/ uploads/ chmod 644 config.php Missing PHP Extensions # Ubuntu/Debian sudo apt-get install php-pdo php-mysql php-mbstring php-curl php-zip php-json # macOS with Homebrew brew install php Docker Alternative (Optional) For a containerized development environment, see the Docker Compose example in deployment-guide.md . Next Steps Explore the API : Use the OpenAPI spec at documentation/docs/openapi.yaml Run all tests to ensure everything works: composer test && npm test Check code architecture : Read documentation/docs/code-architecture.md Review security : See SECURITY.md and run security tests","title":"Setup Guide"},{"location":"developer-setup/#developer-setup-guide","text":"This guide explains how to set up a local development environment for the Patone Roadside Assistance platform.","title":"Developer Setup Guide"},{"location":"developer-setup/#prerequisites","text":"","title":"Prerequisites"},{"location":"developer-setup/#required-software","text":"PHP 7.4+ (project requirement from composer.json ) Composer for PHP dependency management MySQL 5.7+ or MariaDB 10.3+ for the database Node.js 16+ and npm for JavaScript testing and tools Git for version control","title":"Required Software"},{"location":"developer-setup/#required-php-extensions","text":"Ensure these PHP extensions are installed: php -m | grep -E \"(pdo|pdo_mysql|mysqli|mbstring|openssl|json|curl|zip)\"","title":"Required PHP Extensions"},{"location":"developer-setup/#step-by-step-setup","text":"","title":"Step-by-Step Setup"},{"location":"developer-setup/#1-clone-the-repository","text":"git clone https://github.com/GenuineDickies/pat.git cd pat/Desktop/Code\\ Projects/Patone","title":"1. Clone the Repository"},{"location":"developer-setup/#2-install-php-dependencies","text":"composer install","title":"2. Install PHP Dependencies"},{"location":"developer-setup/#3-database-setup","text":"","title":"3. Database Setup"},{"location":"developer-setup/#create-the-database","text":"# Connect to MySQL mysql -u root -p # Create the database CREATE DATABASE roadside_assistance CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; CREATE DATABASE roadside_assistance_test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; exit","title":"Create the Database"},{"location":"developer-setup/#import-the-schema","text":"# Import main database schema mysql -u root -p roadside_assistance < database/schema.sql # Import test database schema mysql -u root -p roadside_assistance_test < database/schema.sql","title":"Import the Schema"},{"location":"developer-setup/#4-configuration","text":"The config.php file contains the main configuration. Key settings to verify: // Database Configuration (lines 23-26 in config.php) define('DB_HOST', 'localhost'); define('DB_USER', 'root'); // Update with your MySQL user define('DB_PASS', ''); // Update with your MySQL password define('DB_NAME', 'roadside_assistance'); Security Note: Change the ENCRYPTION_KEY in config.php before production use.","title":"4. Configuration"},{"location":"developer-setup/#5-install-nodejs-dependencies-for-testing","text":"npm install","title":"5. Install Node.js Dependencies (for testing)"},{"location":"developer-setup/#6-verify-setup-run-tests","text":"","title":"6. Verify Setup - Run Tests"},{"location":"developer-setup/#php-tests-phpunit","text":"# Run all tests composer test # Or directly with PHPUnit vendor/bin/phpunit # Run specific test suites composer test-unit # Unit tests only composer test-integration # Integration tests only composer test-security # Security tests only","title":"PHP Tests (PHPUnit)"},{"location":"developer-setup/#javascript-tests-jest","text":"npm test # Run once npm run test:watch # Watch mode npm run test:coverage # With coverage report","title":"JavaScript Tests (Jest)"},{"location":"developer-setup/#end-to-end-tests-playwright","text":"npm run test:e2e # Headless E2E tests npm run test:e2e:ui # Interactive E2E tests","title":"End-to-End Tests (Playwright)"},{"location":"developer-setup/#development-workflow","text":"","title":"Development Workflow"},{"location":"developer-setup/#running-the-application-locally","text":"# Start PHP development server php -S localhost:8000 -t . index.php # Application will be available at http://localhost:8000","title":"Running the Application Locally"},{"location":"developer-setup/#file-structure-overview","text":"backend/ - PHP controllers, models (PSR-4 autoloaded as Patone\\ namespace) frontend/ - Frontend pages and JavaScript assets/ - Compiled CSS, JS, images database/ - Schema, migrations, sample data tests/ - All test files (Unit, Integration, Security, E2E, JavaScript) logs/ - Application logs uploads/ - File uploads directory","title":"File Structure Overview"},{"location":"developer-setup/#development-tools","text":"","title":"Development Tools"},{"location":"developer-setup/#code-quality-documentation","text":"# Install PHPStan for static analysis (recommended) composer require --dev phpstan/phpstan # Run static analysis vendor/bin/phpstan analyse backend --level=7 # Install phpDocumentor for API docs composer require --dev phpdocumentor/phpdocumentor # Generate PHP API documentation vendor/bin/phpdoc -d backend -t docs/phpdoc","title":"Code Quality &amp; Documentation"},{"location":"developer-setup/#debugging-logs","text":"Application logs: logs/ directory PHP errors: Check error_log in project root or PHP-FPM logs Debug mode: Already enabled in config.php (set display_errors to 0 for production)","title":"Debugging &amp; Logs"},{"location":"developer-setup/#common-issues-solutions","text":"","title":"Common Issues &amp; Solutions"},{"location":"developer-setup/#database-connection-errors","text":"# Test MySQL connection mysql -u root -p -e \"SELECT VERSION();\" # Check if database exists mysql -u root -p -e \"SHOW DATABASES;\" | grep roadside","title":"Database Connection Errors"},{"location":"developer-setup/#permission-issues","text":"# Ensure proper permissions for logs and uploads chmod 755 logs/ uploads/ chmod 644 config.php","title":"Permission Issues"},{"location":"developer-setup/#missing-php-extensions","text":"# Ubuntu/Debian sudo apt-get install php-pdo php-mysql php-mbstring php-curl php-zip php-json # macOS with Homebrew brew install php","title":"Missing PHP Extensions"},{"location":"developer-setup/#docker-alternative-optional","text":"For a containerized development environment, see the Docker Compose example in deployment-guide.md .","title":"Docker Alternative (Optional)"},{"location":"developer-setup/#next-steps","text":"Explore the API : Use the OpenAPI spec at documentation/docs/openapi.yaml Run all tests to ensure everything works: composer test && npm test Check code architecture : Read documentation/docs/code-architecture.md Review security : See SECURITY.md and run security tests","title":"Next Steps"},{"location":"driver-mobile-app/","text":"Driver Mobile App Documentation This document describes the driver mobile app workflow and integration points. Overview Drivers use the mobile app to: - Receive and accept assignments - Update status (available, busy, offline) - Navigate to service locations - Report completion and upload notes/photos API integration Mobile apps should authenticate via /login and include JWT in Authorization header. Endpoints used commonly by the driver app: GET /drivers/{id} \u2014 profile and status GET /requests?status=assigned \u2014 assigned requests POST /requests/{id}/update \u2014 update status or add notes (if implemented) Push notifications If push is implemented, document provider (Firebase/FCM or APNs) keys and how to register device tokens. Offline behavior Cache assigned requests locally and sync status changes when network is available. Driver troubleshooting App login fails: ensure correct credentials and that JWT secret matches the mobile config GPS/location issues: ensure app has location permissions Missing assignments: check driver status and filters on the server Notes for implementers Keep API responses compact; prefer paginated lists for large datasets Use optimistic UI updates for better driver experience","title":"Driver App"},{"location":"driver-mobile-app/#driver-mobile-app-documentation","text":"This document describes the driver mobile app workflow and integration points. Overview Drivers use the mobile app to: - Receive and accept assignments - Update status (available, busy, offline) - Navigate to service locations - Report completion and upload notes/photos API integration Mobile apps should authenticate via /login and include JWT in Authorization header. Endpoints used commonly by the driver app: GET /drivers/{id} \u2014 profile and status GET /requests?status=assigned \u2014 assigned requests POST /requests/{id}/update \u2014 update status or add notes (if implemented) Push notifications If push is implemented, document provider (Firebase/FCM or APNs) keys and how to register device tokens. Offline behavior Cache assigned requests locally and sync status changes when network is available. Driver troubleshooting App login fails: ensure correct credentials and that JWT secret matches the mobile config GPS/location issues: ensure app has location permissions Missing assignments: check driver status and filters on the server Notes for implementers Keep API responses compact; prefer paginated lists for large datasets Use optimistic UI updates for better driver experience","title":"Driver Mobile App Documentation"},{"location":"faq/","text":"FAQ Q: Where are logs stored? A: Local logs are in logs/ . In production, configure a centralized log aggregator. Q: How do I run tests? A: vendor/bin/phpunit --configuration phpunit.xml . Q: How do I view the API spec? A: Use documentation/docs/openapi.yaml with Redoc or Swagger Editor. Q: How do I add a new driver? A: Use the admin dashboard or POST to /api/drivers if endpoint is implemented. Q: Where are frontend assets built? A: Check assets/js and run npm run build to regenerate production assets.","title":"FAQ"},{"location":"faq/#faq","text":"Q: Where are logs stored? A: Local logs are in logs/ . In production, configure a centralized log aggregator. Q: How do I run tests? A: vendor/bin/phpunit --configuration phpunit.xml . Q: How do I view the API spec? A: Use documentation/docs/openapi.yaml with Redoc or Swagger Editor. Q: How do I add a new driver? A: Use the admin dashboard or POST to /api/drivers if endpoint is implemented. Q: Where are frontend assets built? A: Check assets/js and run npm run build to regenerate production assets.","title":"FAQ"},{"location":"integration-guide/","text":"Integration Guide for Third Parties This guide explains how third-party integrators can authenticate and interact with the Patone API. Authentication Obtain API credentials from the platform administrator. Authenticate via /login to retrieve a JWT token. Include Authorization: Bearer <token> in all subsequent API requests. Common integration flows Onboard a new partner: create a user, generate keys, configure webhooks. Query customer information: GET /customers with search. Create service requests on behalf of customers: POST /requests . Webhooks If the platform provides webhook notifications (e.g., request status changes), document payloads, signing secrets, retry behavior, and expected response codes. Rate limits & throttling The current system does not specify global rate limits in the OpenAPI file. Before production use, agree on a rate limit policy with platform operators. Sample requests Example: Create request POST /api/requests Content-Type: application/json Authorization: Bearer { \"customer_id\": 1, \"service_type_id\": 2, \"location_address\": \"123 Main St\", \"location_city\": \"City\", \"location_state\": \"ST\" } Error handling Check for HTTP 4xx and 5xx responses and parse the Error schema from the OpenAPI spec. Onboarding checklist Provide contact and technical point-of-contact Provide test account and production credentials Agree on SLA and supported endpoints Notes Keep integrations robust to schema changes by using API versioning and contract tests.","title":"Integration"},{"location":"integration-guide/#integration-guide-for-third-parties","text":"This guide explains how third-party integrators can authenticate and interact with the Patone API. Authentication Obtain API credentials from the platform administrator. Authenticate via /login to retrieve a JWT token. Include Authorization: Bearer <token> in all subsequent API requests. Common integration flows Onboard a new partner: create a user, generate keys, configure webhooks. Query customer information: GET /customers with search. Create service requests on behalf of customers: POST /requests . Webhooks If the platform provides webhook notifications (e.g., request status changes), document payloads, signing secrets, retry behavior, and expected response codes. Rate limits & throttling The current system does not specify global rate limits in the OpenAPI file. Before production use, agree on a rate limit policy with platform operators. Sample requests Example: Create request POST /api/requests Content-Type: application/json Authorization: Bearer { \"customer_id\": 1, \"service_type_id\": 2, \"location_address\": \"123 Main St\", \"location_city\": \"City\", \"location_state\": \"ST\" } Error handling Check for HTTP 4xx and 5xx responses and parse the Error schema from the OpenAPI spec. Onboarding checklist Provide contact and technical point-of-contact Provide test account and production credentials Agree on SLA and supported endpoints Notes Keep integrations robust to schema changes by using API versioning and contract tests.","title":"Integration Guide for Third Parties"},{"location":"technical-tasks/","text":"Technical Tasks & How-tos This page lists technical how-tos to support documentation maintenance and code hygiene. 1) Run tests (PHPUnit) Run the full test suite: vendor/bin/phpunit --configuration phpunit.xml Run a single test file: vendor/bin/phpunit tests/SomeTest.php 2) Static analysis (PHPStan) Install PHPStan ( composer require --dev phpstan/phpstan ) Run analysis: vendor/bin/phpstan analyse backend --level=7 3) Generate PHPDoc Install phpdocumentor/phpdocumentor via Composer: composer require --dev phpdocumentor/phpdocumentor Generate docs: vendor/bin/phpdoc -d backend -t docs/phpdoc 4) Keeping API spec up-to-date Edit openapi.yaml and ensure endpoints match controller implementations. Consider adding a CI check that validates openapi.yaml against live endpoints (contract tests). 5) Publish documentation Install MkDocs: pip install mkdocs Run a local server: mkdocs serve -f documentation/mkdocs.yml Build static site: mkdocs build -f documentation/mkdocs.yml -d documentation/site CI: add a job to run mkdocs build and publish site/ to GitHub Pages or other static host. 6) Validation & CI Setup See the dedicated \"Validation & CI\" section below for complete setup instructions. 6) Add PHPDoc to code Add /** ... */ style comments to classes and public methods in backend/controllers and backend/models . Example: /* * Get a customer by ID. * * @param int $id * @return array|null / public function getCustomer(int $id): ?array { // ... } Validation & CI Setup Local Validation Before committing, run these validation checks: # Validate MkDocs builds successfully cd /workspaces/pat mkdocs build -f documentation/mkdocs.yml -d documentation/site # Run PHP tests cd \"Desktop/Code Projects/Patone\" composer test # Run JavaScript tests npm test # Check PHP code quality (if PHPStan installed) vendor/bin/phpstan analyse backend --level=7 # Validate OpenAPI spec (if redoc-cli installed) redoc-cli validate documentation/docs/openapi.yaml GitHub Actions CI Setup Create .github/workflows/ci.yml to automate validation: name: CI on: [push, pull_request] jobs: test: runs-on: ubuntu-latest services: mysql: image: mysql:8.0 env: MYSQL_ROOT_PASSWORD: root MYSQL_DATABASE: roadside_assistance_test options: >- --health-cmd=\"mysqladmin ping\" --health-interval=10s --health-timeout=5s --health-retries=3 steps: - uses: actions/checkout@v3 - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: pdo, pdo_mysql, mbstring, curl, zip, json - name: Install Composer dependencies working-directory: ./Desktop/Code\\ Projects/Patone run: composer install --prefer-dist --no-progress - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: '18' - name: Install Node dependencies working-directory: ./Desktop/Code\\ Projects/Patone run: npm install - name: Run PHP tests working-directory: ./Desktop/Code\\ Projects/Patone run: composer test env: DB_HOST: 127.0.0.1 DB_PORT: 3306 DB_DATABASE: roadside_assistance_test DB_USERNAME: root DB_PASSWORD: root - name: Run JavaScript tests working-directory: ./Desktop/Code\\ Projects/Patone run: npm test docs: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Setup Python uses: actions/setup-python@v4 with: python-version: '3.x' - name: Install MkDocs run: pip install mkdocs - name: Build documentation run: mkdocs build -f documentation/mkdocs.yml -d documentation/site - name: Deploy to GitHub Pages if: github.ref == 'refs/heads/main' uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./documentation/site Documentation Deployment GitHub Pages Setup : 1. Go to repository Settings \u2192 Pages 2. Set source to \"GitHub Actions\" 3. The CI will automatically deploy docs on main branch updates 4. Documentation will be available at https://username.github.io/repo-name Alternative Hosting : - Netlify : Connect repo, set build command to mkdocs build -f documentation/mkdocs.yml , publish directory to documentation/site - Vercel : Similar setup with build command - AWS S3 : Upload documentation/site/ contents to S3 bucket with static hosting Quality Gates Recommended PR checks: - [ ] All tests pass (PHP + JavaScript) - [ ] MkDocs builds without errors - [ ] No PHPStan errors (if enabled) - [ ] OpenAPI spec validates (if tooling added) Manual Release Checklist Before major releases: - [ ] Update version numbers in package.json and documentation - [ ] Review and update all documentation for accuracy - [ ] Test full local setup using developer setup guide - [ ] Generate fresh PHPDoc and commit any updates - [ ] Verify all links in documentation work - [ ] Update changelog/release notes Notes Automate as much as possible (linting, phpstan, phpunit) in CI for PR quality checks. Consider adding Lighthouse CI for performance testing of the documentation site. Set up branch protection rules to require CI checks before merging.","title":"Technical Tasks"},{"location":"technical-tasks/#technical-tasks-how-tos","text":"This page lists technical how-tos to support documentation maintenance and code hygiene. 1) Run tests (PHPUnit) Run the full test suite: vendor/bin/phpunit --configuration phpunit.xml Run a single test file: vendor/bin/phpunit tests/SomeTest.php 2) Static analysis (PHPStan) Install PHPStan ( composer require --dev phpstan/phpstan ) Run analysis: vendor/bin/phpstan analyse backend --level=7 3) Generate PHPDoc Install phpdocumentor/phpdocumentor via Composer: composer require --dev phpdocumentor/phpdocumentor Generate docs: vendor/bin/phpdoc -d backend -t docs/phpdoc 4) Keeping API spec up-to-date Edit openapi.yaml and ensure endpoints match controller implementations. Consider adding a CI check that validates openapi.yaml against live endpoints (contract tests). 5) Publish documentation Install MkDocs: pip install mkdocs Run a local server: mkdocs serve -f documentation/mkdocs.yml Build static site: mkdocs build -f documentation/mkdocs.yml -d documentation/site CI: add a job to run mkdocs build and publish site/ to GitHub Pages or other static host. 6) Validation & CI Setup See the dedicated \"Validation & CI\" section below for complete setup instructions. 6) Add PHPDoc to code Add /** ... */ style comments to classes and public methods in backend/controllers and backend/models . Example: /* * Get a customer by ID. * * @param int $id * @return array|null / public function getCustomer(int $id): ?array { // ... }","title":"Technical Tasks &amp; How-tos"},{"location":"technical-tasks/#validation-ci-setup","text":"","title":"Validation &amp; CI Setup"},{"location":"technical-tasks/#local-validation","text":"Before committing, run these validation checks: # Validate MkDocs builds successfully cd /workspaces/pat mkdocs build -f documentation/mkdocs.yml -d documentation/site # Run PHP tests cd \"Desktop/Code Projects/Patone\" composer test # Run JavaScript tests npm test # Check PHP code quality (if PHPStan installed) vendor/bin/phpstan analyse backend --level=7 # Validate OpenAPI spec (if redoc-cli installed) redoc-cli validate documentation/docs/openapi.yaml","title":"Local Validation"},{"location":"technical-tasks/#github-actions-ci-setup","text":"Create .github/workflows/ci.yml to automate validation: name: CI on: [push, pull_request] jobs: test: runs-on: ubuntu-latest services: mysql: image: mysql:8.0 env: MYSQL_ROOT_PASSWORD: root MYSQL_DATABASE: roadside_assistance_test options: >- --health-cmd=\"mysqladmin ping\" --health-interval=10s --health-timeout=5s --health-retries=3 steps: - uses: actions/checkout@v3 - name: Setup PHP uses: shivammathur/setup-php@v2 with: php-version: '8.0' extensions: pdo, pdo_mysql, mbstring, curl, zip, json - name: Install Composer dependencies working-directory: ./Desktop/Code\\ Projects/Patone run: composer install --prefer-dist --no-progress - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: '18' - name: Install Node dependencies working-directory: ./Desktop/Code\\ Projects/Patone run: npm install - name: Run PHP tests working-directory: ./Desktop/Code\\ Projects/Patone run: composer test env: DB_HOST: 127.0.0.1 DB_PORT: 3306 DB_DATABASE: roadside_assistance_test DB_USERNAME: root DB_PASSWORD: root - name: Run JavaScript tests working-directory: ./Desktop/Code\\ Projects/Patone run: npm test docs: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Setup Python uses: actions/setup-python@v4 with: python-version: '3.x' - name: Install MkDocs run: pip install mkdocs - name: Build documentation run: mkdocs build -f documentation/mkdocs.yml -d documentation/site - name: Deploy to GitHub Pages if: github.ref == 'refs/heads/main' uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./documentation/site","title":"GitHub Actions CI Setup"},{"location":"technical-tasks/#documentation-deployment","text":"GitHub Pages Setup : 1. Go to repository Settings \u2192 Pages 2. Set source to \"GitHub Actions\" 3. The CI will automatically deploy docs on main branch updates 4. Documentation will be available at https://username.github.io/repo-name Alternative Hosting : - Netlify : Connect repo, set build command to mkdocs build -f documentation/mkdocs.yml , publish directory to documentation/site - Vercel : Similar setup with build command - AWS S3 : Upload documentation/site/ contents to S3 bucket with static hosting","title":"Documentation Deployment"},{"location":"technical-tasks/#quality-gates","text":"Recommended PR checks: - [ ] All tests pass (PHP + JavaScript) - [ ] MkDocs builds without errors - [ ] No PHPStan errors (if enabled) - [ ] OpenAPI spec validates (if tooling added)","title":"Quality Gates"},{"location":"technical-tasks/#manual-release-checklist","text":"Before major releases: - [ ] Update version numbers in package.json and documentation - [ ] Review and update all documentation for accuracy - [ ] Test full local setup using developer setup guide - [ ] Generate fresh PHPDoc and commit any updates - [ ] Verify all links in documentation work - [ ] Update changelog/release notes Notes Automate as much as possible (linting, phpstan, phpunit) in CI for PR quality checks. Consider adding Lighthouse CI for performance testing of the documentation site. Set up branch protection rules to require CI checks before merging.","title":"Manual Release Checklist"},{"location":"troubleshooting/","text":"Troubleshooting Where to look Application logs: logs/ directory PHP logs: php-fpm or webserver logs Database connectivity: try connecting with mysql client Common issues 500 Internal Server Error Check PHP and webserver logs for stack traces Check for missing environment variables or DB credentials Database connection failures Verify DB is running and credentials in config.php are correct Ensure proper network/firewall configuration Tests failing locally Run vendor/bin/phpunit -v and inspect failing tests Check for missing test fixtures or environment variables Auth / JWT problems Ensure JWT secret is set and consistent between apps and API Check token expiry and clock skew Frontend asset 404s Rebuild assets: npm run build or ensure published assets are present in assets/ Log levels & debug For local debugging, set debug mode and check stack traces. Never enable debug in production. Recovery steps Roll back to previous working release if issue is due to a new deploy Reapply DB patch or restore backup if migration caused data loss Collecting useful error reports Capture timestamps, request IDs (if present), user ID, and relevant log snippets Reproduce issue in staging before applying fixes to production","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"Where to look Application logs: logs/ directory PHP logs: php-fpm or webserver logs Database connectivity: try connecting with mysql client Common issues 500 Internal Server Error Check PHP and webserver logs for stack traces Check for missing environment variables or DB credentials Database connection failures Verify DB is running and credentials in config.php are correct Ensure proper network/firewall configuration Tests failing locally Run vendor/bin/phpunit -v and inspect failing tests Check for missing test fixtures or environment variables Auth / JWT problems Ensure JWT secret is set and consistent between apps and API Check token expiry and clock skew Frontend asset 404s Rebuild assets: npm run build or ensure published assets are present in assets/ Log levels & debug For local debugging, set debug mode and check stack traces. Never enable debug in production. Recovery steps Roll back to previous working release if issue is due to a new deploy Reapply DB patch or restore backup if migration caused data loss Collecting useful error reports Capture timestamps, request IDs (if present), user ID, and relevant log snippets Reproduce issue in staging before applying fixes to production","title":"Troubleshooting"}]}