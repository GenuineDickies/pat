openapi: 3.0.3
info:
  title: Patone Roadside Assistance API
  description: |
    RESTful API for managing roadside assistance operations, including customers,
    drivers, service requests, and reporting.
  version: 1.0.0
  contact:
    name: Patone Support
    email: support@roadsideassistance.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.roadsideassistance.com/api
    description: Production server
  - url: http://localhost/api
    description: Development server

tags:
  - name: Customers
    description: Customer management operations
  - name: Drivers
    description: Driver management and location tracking
  - name: Service Requests
    description: Service request lifecycle management
  - name: Service Types
    description: Available service types
  - name: Dashboard
    description: Dashboard statistics and metrics

paths:
  /customers:
    get:
      tags:
        - Customers
      summary: List all customers
      description: Retrieve a paginated list of customers with optional search
      parameters:
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            default: 25
            maximum: 100
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
        - name: search
          in: query
          description: Search term for filtering customers
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      customers:
                        type: array
                        items:
                          $ref: '#/components/schemas/Customer'
                      total:
                        type: integer
                      limit:
                        type: integer
                      offset:
                        type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /customers/{id}:
    get:
      tags:
        - Customers
      summary: Get customer by ID
      description: Retrieve detailed information about a specific customer
      parameters:
        - name: id
          in: path
          required: true
          description: Customer ID
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Customer'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /drivers:
    get:
      tags:
        - Drivers
      summary: List all drivers
      description: Retrieve a paginated list of drivers
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 25
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      drivers:
                        type: array
                        items:
                          $ref: '#/components/schemas/Driver'
                      total:
                        type: integer

  /drivers/{id}:
    get:
      tags:
        - Drivers
      summary: Get driver by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Driver'

  /drivers/available:
    get:
      tags:
        - Drivers
      summary: Get available drivers
      description: Retrieve list of drivers currently available for assignment
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Driver'

  /drivers/{id}/location:
    put:
      tags:
        - Drivers
      summary: Update driver location
      description: Update the GPS coordinates of a driver
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - latitude
                - longitude
              properties:
                latitude:
                  type: number
                  format: double
                  example: 37.7749
                longitude:
                  type: number
                  format: double
                  example: -122.4194
      responses:
        '200':
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /requests:
    get:
      tags:
        - Service Requests
      summary: List service requests
      description: Retrieve a paginated list of service requests with filtering
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 25
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: status
          in: query
          description: Filter by request status
          schema:
            type: string
            enum: [pending, assigned, in_progress, completed, cancelled]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      requests:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceRequest'
                      total:
                        type: integer
    post:
      tags:
        - Service Requests
      summary: Create service request
      description: Create a new service request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequestCreate'
      responses:
        '201':
          description: Request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ServiceRequest'

  /requests/{id}:
    get:
      tags:
        - Service Requests
      summary: Get service request by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ServiceRequest'

  /requests/{id}/status:
    put:
      tags:
        - Service Requests
      summary: Update request status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, assigned, in_progress, completed, cancelled]
      responses:
        '200':
          description: Status updated successfully

  /service-types:
    get:
      tags:
        - Service Types
      summary: List service types
      description: Retrieve all available service types
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceType'

  /dashboard-stats:
    get:
      tags:
        - Dashboard
      summary: Get dashboard statistics
      description: Retrieve current dashboard statistics and metrics
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/DashboardStats'

components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        phone:
          type: string
          example: "+1-555-0123"
        address:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        is_vip:
          type: boolean
        status:
          type: string
          enum: [active, inactive, suspended]
        created_at:
          type: string
          format: date-time

    Driver:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        status:
          type: string
          enum: [available, busy, offline, on_break]
        current_latitude:
          type: number
          format: double
        current_longitude:
          type: number
          format: double
        rating:
          type: number
          format: float
        total_jobs:
          type: integer
        completed_jobs:
          type: integer

    ServiceRequest:
      type: object
      properties:
        id:
          type: integer
        customer_id:
          type: integer
        driver_id:
          type: integer
          nullable: true
        service_type_id:
          type: integer
        status:
          type: string
          enum: [pending, assigned, in_progress, completed, cancelled]
        priority:
          type: string
          enum: [low, normal, high, emergency]
        location_address:
          type: string
        location_latitude:
          type: number
          format: double
        location_longitude:
          type: number
          format: double
        description:
          type: string
        created_at:
          type: string
          format: date-time
        assigned_at:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true

    ServiceRequestCreate:
      type: object
      required:
        - customer_id
        - service_type_id
        - location_address
      properties:
        customer_id:
          type: integer
        service_type_id:
          type: integer
        location_address:
          type: string
        location_latitude:
          type: number
          format: double
        location_longitude:
          type: number
          format: double
        description:
          type: string
        priority:
          type: string
          enum: [low, normal, high, emergency]
          default: normal

    ServiceType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        base_price:
          type: number
          format: decimal
        estimated_duration:
          type: integer
          description: Duration in minutes
        is_active:
          type: boolean

    DashboardStats:
      type: object
      properties:
        total_requests:
          type: integer
        pending_requests:
          type: integer
        active_requests:
          type: integer
        completed_today:
          type: integer
        available_drivers:
          type: integer
        total_drivers:
          type: integer
        total_customers:
          type: integer
        average_response_time:
          type: number
          description: Average response time in minutes

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string

  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Unauthorized"
    
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Resource not found"

  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: PHPSESSID
      description: Session-based authentication

security:
  - sessionAuth: []
